;
(function ($) {
    $.fn.markItUp = function (settings, extraSettings) {
        var options, ctrlKey, shiftKey, altKey;
        ctrlKey = shiftKey = altKey = false;
        options = {
            id: "",
            nameSpace: "",
            root: "",
            previewInWindow: "",
            previewAutoRefresh: false,
            previewPosition: "after",
            previewTemplatePath: "~/templates/preview.html",
            previewParserPath: "",
            previewParserVar: "data",
            resizeHandle: true,
            beforeInsert: "",
            afterInsert: "",
            onEnter: {},
            onShiftEnter: {},
            onCtrlEnter: {},
            onTab: {},
            markupSet: [{}]
        };
        $.extend(options, settings, extraSettings);
        if (!options.root) {
            $("script").each(function (a, b) {
                miuScript = $(b).get(0).src.match(/(.*)jquery\.markitup(\.pack)?\.js$/);
                if (miuScript !== null) {
                    options.root = miuScript[1]
                }
            })
        }
        return this.each(function () {
            function localize(a, b) {
                if (b) {
                    return a.replace(/("|')~\//g, "$1" + options.root)
                }
                return a.replace(/^~\//, options.root)
            }
            function init() {
                id = "";
                nameSpace = "";
                if (options.id) {
                    id = 'id="' + options.id + '"'
                } else {
                    if ($$.attr("id")) {
                        id = 'id="markItUp' + $$.attr("id").substr(0, 1).toUpperCase() + $$.attr("id").substr(1) + '"'
                    }
                }
                if (options.nameSpace) {
                    nameSpace = 'class="' + options.nameSpace + '"'
                }
                $$.wrap("<div " + nameSpace + "></div>");
                $$.wrap("<div " + id + ' class="markItUp"></div>');
                $$.wrap('<div class="markItUpContainer"></div>');
                $$.addClass("markItUpEditor");
                header = $('<div class="markItUpHeader"></div>').insertBefore($$);
                $(dropMenus(options.markupSet)).appendTo(header);
                footer = $('<div class="markItUpFooter"></div>').insertAfter($$);
                $$.wrap('<div class="markItUpEditorWrap"></div>');
                if (options.resizeHandle === true && $.browser.safari !== true) {
                    resizeHandle = $('<div class="markItUpResizeHandle"></div>').insertAfter($$).bind("mousedown", function (a) {
                        var b = $$.height(),
                            c = a.clientY,
                            d, e;
                        d = function (a) {
                            $$.css("height", Math.max(20, a.clientY + b - c) + "px");
                            return false
                        };
                        e = function (a) {
                            $("html").unbind("mousemove", d).unbind("mouseup", e);
                            return false
                        };
                        $("html").bind("mousemove", d).bind("mouseup", e)
                    });
                    footer.append(resizeHandle)
                }
                //$$.keydown(keyPressed).keyup(keyPressed);
                $$.bind("insertion", function (a, b) {
                    if (b.target !== false) {
                        get()
                    }
                    if (textarea === $.markItUp.focused) {
                        markup(b)
                    }
                });
                $$.focus(function () {
                    $.markItUp.focused = this
                })
            }
            function dropMenus(markupSet) {
                var ul = $("<ul></ul>"),
                    i = 0;
                $("li:hover > ul", ul).css("display", "block");
                $.each(markupSet, function () {
                    var button = this,
                        t = "",
                        title, li, j;
                    title = button.key ? (button.name || "") + " [Ctrl+" + button.key + "]" : button.name || "";
                    key = button.key ? String('accesskey="' + button.key + '"') : "";
                    if (button.separator) {
                        li = $('<li class="markItUpSeparator">' + (button.separator || "") + "</li>").appendTo(ul)
                    } else {
                        i++;
                        for (j = levels.length - 1; j >= 0; j--) {
                            t += levels[j] + "-"
                        }
                        li = $('<li class="markItUpButton markItUpButton' + t + i + " " + (button.className || "") + '"><a href="" ' + key + (t.length ? "" : ' title="' + String(title) + '"') + ">" + (button.name || "") + "</a></li>").bind("contextmenu", function () {
                            return false
                        }).click(function () {
                            $("ul ul", header).hide();
                            return false
                        }).mouseup(function () {
                            if (button.call) {
                                eval(button.call)()
                            }
                            markup(button);
                            return false
                        }).hover(function () {
                            $("> ul", this).show();
                            $(document).one("click", function () {
                                $("ul ul", header).hide()
                            })
                        }, function () {
                            $("> ul", this).hide()
                        }).appendTo(ul);
                        if (button.dropMenu) {
                            levels.push(i);
                            $(li).addClass("markItUpDropMenu").append(dropMenus(button.dropMenu))
                        }
                    }
                });
                levels.pop();
                return ul
            }
            function magicMarkups(a) {
                if (a) {
                    a = a.toString();
                    a = a.replace(/\(\!\(([\s\S]*?)\)\!\)/g, function (a, b) {
                        var c = b.split("|!|");
                        if (altKey === true) {
                            return c[1] !== undefined ? c[1] : c[0]
                        } else {
                            return c[1] === undefined ? "" : c[0]
                        }
                    });
                    a = a.replace(/\[\!\[([\s\S]*?)\]\!\]/g, function (a, b) {
                        var c = b.split(":!:");
                        if (abort === true) {
                            return false
                        }
                        value = prompt(c[0], c[1] ? c[1] : "");
                        if (value === null) {
                            abort = true
                        }
                        return value
                    });
                    return a
                }
                return ""
            }
            function prepare(a) {
                if ($.isFunction(a)) {
                    a = a(hash)
                }
                return magicMarkups(a)
            }
            function build(a) {
                openWith = prepare(clicked.openWith);
                placeHolder = prepare(clicked.placeHolder);
                replaceWith = prepare(clicked.replaceWith);
                closeWith = prepare(clicked.closeWith);
                if (replaceWith !== "") {
                    block = openWith + replaceWith + closeWith
                } else {
                    if (selection === "" && placeHolder !== "") {
                        block = openWith + placeHolder + closeWith
                    } else {
                        block = openWith + (a || selection) + closeWith
                    }
                }
                return {
                    block: block,
                    openWith: openWith,
                    replaceWith: replaceWith,
                    placeHolder: placeHolder,
                    closeWith: closeWith
                }
            }
            function markup(a) {
                var b, c, d, e;
                hash = clicked = a;
                get();
                $.extend(hash, {
                    line: "",
                    root: options.root,
                    textarea: textarea,
                    selection: selection || "",
                    caretPosition: caretPosition,
                    ctrlKey: ctrlKey,
                    shiftKey: shiftKey,
                    altKey: altKey
                });
                prepare(options.beforeInsert);
                prepare(clicked.beforeInsert);
                if (ctrlKey === true && shiftKey === true) {
                    prepare(clicked.beforeMultiInsert)
                }
                $.extend(hash, {
                    line: 1
                });
                if (ctrlKey === true && shiftKey === true) {
                    lines = selection.split(/\r?\n/);
                    for (c = 0, d = lines.length, e = 0; e < d; e++) {
                        if ($.trim(lines[e]) !== "") {
                            $.extend(hash, {
                                line: ++c,
                                selection: lines[e]
                            });
                            lines[e] = build(lines[e]).block
                        } else {
                            lines[e] = ""
                        }
                    }
                    string = {
                        block: lines.join("\n")
                    };
                    start = caretPosition;
                    b = string.block.length + ($.browser.opera ? d : 0)
                } else {
                    if (ctrlKey === true) {
                        string = build(selection);
                        start = caretPosition + string.openWith.length;
                        b = string.block.length - string.openWith.length - string.closeWith.length;
                        b -= fixIeBug(string.block)
                    } else {
                        if (shiftKey === true) {
                            string = build(selection);
                            start = caretPosition;
                            b = string.block.length;
                            b -= fixIeBug(string.block)
                        } else {
                            string = build(selection);
                            start = caretPosition + string.block.length;
                            b = 0;
                            start -= fixIeBug(string.block)
                        }
                    }
                }
                if (selection === "" && string.replaceWith === "") {
                    caretOffset += fixOperaBug(string.block);
                    start = caretPosition + string.openWith.length;
                    b = string.block.length - string.openWith.length - string.closeWith.length;
                    caretOffset = $$.val().substring(caretPosition, $$.val().length).length;
                    caretOffset -= fixOperaBug($$.val().substring(0, caretPosition))
                }
                $.extend(hash, {
                    caretPosition: caretPosition,
                    scrollPosition: scrollPosition
                });
                if (string.block !== selection && abort === false) {
                    insert(string.block);
                    if (selection.length > 0) {
                        set(caretPosition + string.openWith.length, selection.length)
                    } else {
                        set(start, b)
                    }
                } else {
                    caretOffset = -1
                }
                get();
                $.extend(hash, {
                    line: "",
                    selection: selection
                });
                if (ctrlKey === true && shiftKey === true) {
                    prepare(clicked.afterMultiInsert)
                }
                prepare(clicked.afterInsert);
                prepare(options.afterInsert);
                if (previewWindow && options.previewAutoRefresh) {
                    refreshPreview()
                }
                shiftKey = altKey = ctrlKey = abort = false
            }
            function fixOperaBug(a) {
                if ($.browser.opera) {
                    return a.length - a.replace(/\n*/g, "").length
                }
                return 0
            }
            function fixIeBug(a) {
                if ($.browser.msie) {
                    return a.length - a.replace(/\r*/g, "").length
                }
                return 0
            }
            function insert(a) {
                if (document.selection) {
                    var b = document.selection.createRange();
                    b.text = a
                } else {
                    $$.val($$.val().substring(0, caretPosition) + a + $$.val().substring(caretPosition + selection.length, $$.val().length))
                }
            }
            function set(a, b) {
                if (textarea.createTextRange) {
                    if ($.browser.opera && $.browser.version >= 9.5 && b == 0) {
                        return false
                    }
                    range = textarea.createTextRange();
                    range.collapse(true);
                    range.moveStart("character", a);
                    range.moveEnd("character", b);
                    range.select()
                } else {
                    if (textarea.setSelectionRange) {
                        textarea.setSelectionRange(a, a + b)
                    }
                }
                textarea.scrollTop = scrollPosition;
                textarea.focus()
            }
            function get() {
                textarea.focus();
                scrollPosition = textarea.scrollTop;
                if (document.selection) {
                    selection = document.selection.createRange().text;
                    if ($.browser.msie) {
                        var a = document.selection.createRange(),
                            b = a.duplicate();
                        b.moveToElementText(textarea);
                        caretPosition = -1;
                        while (b.inRange(a)) {
                            b.moveStart("character");
                            caretPosition++
                        }
                    } else {
                        caretPosition = textarea.selectionStart
                    }
                } else {
                    caretPosition = textarea.selectionStart;
                    selection = $$.val().substring(caretPosition, textarea.selectionEnd)
                }
                return selection
            }
            function preview() {
                if (!previewWindow || previewWindow.closed) {
                    if (options.previewInWindow) {
                        previewWindow = window.open("", "preview", options.previewInWindow)
                    } else {
                        iFrame = $('<iframe class="markItUpPreviewFrame"></iframe>');
                        if (options.previewPosition == "after") {
                            iFrame.insertAfter(footer)
                        } else {
                            iFrame.insertBefore(header)
                        }
                        previewWindow = iFrame[iFrame.length - 1].contentWindow || frame[iFrame.length - 1]
                    }
                } else {
                    if (altKey === true) {
                        if (iFrame) {
                            iFrame.remove()
                        }
                        previewWindow.close();
                        previewWindow = iFrame = false
                    }
                }
                if (!options.previewAutoRefresh) {
                    refreshPreview()
                }
            }
            function refreshPreview() {
                if (previewWindow.document) {
                    try {
                        sp = previewWindow.document.documentElement.scrollTop
                    } catch (a) {
                        sp = 0
                    }
                    previewWindow.document.open();
                    previewWindow.document.write(renderPreview());
                    previewWindow.document.close();
                    previewWindow.document.documentElement.scrollTop = sp
                }
                if (options.previewInWindow) {
                    previewWindow.focus()
                }
            }
            function renderPreview() {
                if (options.previewParserPath !== "") {
                    $.ajax({
                        type: "POST",
                        async: false,
                        url: options.previewParserPath,
                        data: options.previewParserVar + "=" + encodeURIComponent($$.val()),
                        success: function (a) {
                            phtml = localize(a, 1)
                        }
                    })
                } else {
                    if (!template) {
                        $.ajax({
                            async: false,
                            url: options.previewTemplatePath,
                            success: function (a) {
                                template = localize(a, 1)
                            }
                        })
                    }
                    phtml = template.replace(/<!-- content -->/g, $$.val())
                }
                return phtml
            }
            function keyPressed(a) {
                shiftKey = a.shiftKey;
                altKey = a.altKey;
                ctrlKey = false;
                if (a.type === "keydown") {
                    if (ctrlKey === true) {
                        li = $("a[accesskey=" + String.fromCharCode(a.keyCode) + "]", header).parent("li");
                        if (li.length !== 0) {
                            ctrlKey = false;
                            li.triggerHandler("mouseup");
                            return false
                        }
                    }
                    if (a.keyCode === 13 || a.keyCode === 10) {
                        if (ctrlKey === true) {
                            ctrlKey = false;
                            markup(options.onCtrlEnter);
                            return options.onCtrlEnter.keepDefault
                        } else {
                            if (shiftKey === true) {
                                shiftKey = false;
                                markup(options.onShiftEnter);
                                return options.onShiftEnter.keepDefault
                            } else {
                                markup(options.onEnter);
                                return options.onEnter.keepDefault
                            }
                        }
                    }
                    /*
                    if (a.keyCode === 9) {
                        if (shiftKey == true || ctrlKey == true || altKey == true) {
                            return false
                        }
                        if (caretOffset !== -1) {
                            get();
                            caretOffset = $$.val().length - caretOffset;
                            set(caretOffset, 0);
                            caretOffset = -1;
                            return false
                        } else {
                            markup(options.onTab);
                            return options.onTab.keepDefault
                        }
                    }*/
                }
            }
            var $$, textarea, levels, scrollPosition, caretPosition, caretOffset, clicked, hash, header, footer, previewWindow, template, iFrame, abort;
            $$ = $(this);
            textarea = this;
            levels = [];
            abort = false;
            scrollPosition = caretPosition = 0;
            caretOffset = -1;
            codo = this;
            options.previewParserPath = localize(options.previewParserPath);
            options.previewTemplatePath = localize(options.previewTemplatePath);
            init()
        })
    };
    $.fn.markItUpRemove = function () {
        return this.each(function () {
        	console.log('UNBIND!');
            $$ = $(this).unbind().removeClass("markItUpEditor");
            $$.parent("div").parent("div.markItUp").parent("div").replaceWith($$)
        })
    };
    $.markItUp = function (a) {
        var b = {
            target: false
        };
        $.extend(b, a);
        if (b.target) {
            return $(b.target).each(function () {
                $(this).focus();
                $(this).trigger("insertion", [b])
            })
        } else {
            $("textarea").trigger("insertion", [b])
        }
    }
})(jQuery);